// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: protos/email_v1.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmailClient is the client API for Email service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailClient interface {
	SendMessage(ctx context.Context, in *EmailMessageRequest, opts ...grpc.CallOption) (*EmailEmptyReply, error)
	SendMessageToRecipient(ctx context.Context, in *EmailMessageWithRecipientRequest, opts ...grpc.CallOption) (*EmailEmptyReply, error)
	SendMessageToRecipients(ctx context.Context, in *EmailMessageWithRecipientsRequest, opts ...grpc.CallOption) (*EmailEmptyReply, error)
}

type emailClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailClient(cc grpc.ClientConnInterface) EmailClient {
	return &emailClient{cc}
}

func (c *emailClient) SendMessage(ctx context.Context, in *EmailMessageRequest, opts ...grpc.CallOption) (*EmailEmptyReply, error) {
	out := new(EmailEmptyReply)
	err := c.cc.Invoke(ctx, "/email_v1.Email/send_message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailClient) SendMessageToRecipient(ctx context.Context, in *EmailMessageWithRecipientRequest, opts ...grpc.CallOption) (*EmailEmptyReply, error) {
	out := new(EmailEmptyReply)
	err := c.cc.Invoke(ctx, "/email_v1.Email/send_message_to_recipient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailClient) SendMessageToRecipients(ctx context.Context, in *EmailMessageWithRecipientsRequest, opts ...grpc.CallOption) (*EmailEmptyReply, error) {
	out := new(EmailEmptyReply)
	err := c.cc.Invoke(ctx, "/email_v1.Email/send_message_to_recipients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailServer is the server API for Email service.
// All implementations must embed UnimplementedEmailServer
// for forward compatibility
type EmailServer interface {
	SendMessage(context.Context, *EmailMessageRequest) (*EmailEmptyReply, error)
	SendMessageToRecipient(context.Context, *EmailMessageWithRecipientRequest) (*EmailEmptyReply, error)
	SendMessageToRecipients(context.Context, *EmailMessageWithRecipientsRequest) (*EmailEmptyReply, error)
	mustEmbedUnimplementedEmailServer()
}

// UnimplementedEmailServer must be embedded to have forward compatible implementations.
type UnimplementedEmailServer struct {
}

func (UnimplementedEmailServer) SendMessage(context.Context, *EmailMessageRequest) (*EmailEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedEmailServer) SendMessageToRecipient(context.Context, *EmailMessageWithRecipientRequest) (*EmailEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageToRecipient not implemented")
}
func (UnimplementedEmailServer) SendMessageToRecipients(context.Context, *EmailMessageWithRecipientsRequest) (*EmailEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageToRecipients not implemented")
}
func (UnimplementedEmailServer) mustEmbedUnimplementedEmailServer() {}

// UnsafeEmailServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailServer will
// result in compilation errors.
type UnsafeEmailServer interface {
	mustEmbedUnimplementedEmailServer()
}

func RegisterEmailServer(s grpc.ServiceRegistrar, srv EmailServer) {
	s.RegisterService(&Email_ServiceDesc, srv)
}

func _Email_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/email_v1.Email/send_message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServer).SendMessage(ctx, req.(*EmailMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Email_SendMessageToRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailMessageWithRecipientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServer).SendMessageToRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/email_v1.Email/send_message_to_recipient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServer).SendMessageToRecipient(ctx, req.(*EmailMessageWithRecipientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Email_SendMessageToRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailMessageWithRecipientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServer).SendMessageToRecipients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/email_v1.Email/send_message_to_recipients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServer).SendMessageToRecipients(ctx, req.(*EmailMessageWithRecipientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Email_ServiceDesc is the grpc.ServiceDesc for Email service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Email_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "email_v1.Email",
	HandlerType: (*EmailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "send_message",
			Handler:    _Email_SendMessage_Handler,
		},
		{
			MethodName: "send_message_to_recipient",
			Handler:    _Email_SendMessageToRecipient_Handler,
		},
		{
			MethodName: "send_message_to_recipients",
			Handler:    _Email_SendMessageToRecipients_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/email_v1.proto",
}
